// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
  "swagger": "2.0",
  "info":{
        "title":"GoFiberMongo",
        "description":"GoFiberMongo",
        "version":"1.0"
    },
  "paths": {

        "/api/create-user":{
           "post":{
                "operationId":"Create user",
                "tags":[
                    "SERVICE"
                ],
                "description":"Create user",
                "summary":"Cea usuario",
                "parameters":[
                    {
                        "name":"CheckContent",
                        "in":"body",
                        "description":"Content to validate",
                        "required":true,
						            "schema": {
                            "$ref": "#/definitions/SendData"
                        }
                    }
                ],
                "responses":{

                }
            }
        }
  },

  "definitions":{
        "SendData": {
            "required": [
                "name",
                "email"

            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "email":{
                    "type": "string"
                }
            }
        }
}
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
